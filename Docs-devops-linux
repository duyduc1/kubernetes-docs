// Kiến thức ngoài Devops 
	- TCP/IP (Transmission Control Protocol/Internet Protocol) is a standard protocol suite used
	 to connect devices on networks, 
	 especially the Internet. It is the foundation of modern networking protocols,
	 providing a way for devices to exchange data with each other.
	- Devops : là người đưa ra giải pháp giúp tôi ưu quy trình làm việc , tăng chất lượng làm việc và sản phẩm
	- Linux : là 1 hệ điều hành : Tối ưu chi phí , bảo mật và ổn định , khả năng kiểm soát và linh hoạt , 
	dễ phát triển và cập nhật , tương thích đa nền tảng , cộng đồng phát triển lớn
	ssh-keygen -R 192.168.1.110
	Devops for fresher 
	mk vuduyduc28042002

// lệnh reset trạng thái của intelliji
java -jar "reset-trial-app-1.0-jar-with-dependencies (2).jar"

* bài 1
	// setup IP tĩnh cho Server
	- sudo -i 
	- nano /etc/netplan/ + tab (trong quá trình setup IP tĩnh không được dùng tab để cách)
		dhcp4: false
		addresses: [192.168.1.110/24]
		gateway4: 192.168.1.1
		nameservers:
	  	  addresses: [8.8.8.8,8.8.4.4]
	 ctr + x chọn y để lưu
	- netplan apply (áp dụng IP tĩnh)
	- ipa ( để xem chi tiết IP tĩnh)
	- sau đó power off tắt để tạo bảng snapshop
	- sau đó run lại 
	- mở cmd gõ lệnh ssh duc@192.168.1.110 nhập mật khẩu 

* bài 2 - các lệnh devops cơ bản

	- pwd : xem đang ở thư mục nào
	- whoami : xem đang là user nào
	- cd : để chuyển qua thư mục khác
	- ls : để xem tất cả các thư mục 
	- ls -lta: hiển thị tất cả các thư mục file sắp xếp mới đến cũ
	- ls -l : hiển thị nội dung dưới dạng danh sách 
	- mkdir : tạo một folder || mkdir -p để cấp thêm quyền tạo folder trong folder
	- touch : tạo một thư mục 
	- rm : xoá thư mục hoặc folder || sử dụng lệnh rm -r để cấp quyền xoá || sử dụng lệnh rm -rf 
	- cp -r folder/ /vitricanchuyentoi/ 
	- cp file/ /vitri/ 
	- adduser devops // tạo một user mới
	- mv /filehoacfoldercanchuyen/ denvitricanchuyen
	- tail -n folder hoặc file dự án
	- sudo usermod -aG group_name user_name // them user vao group
	- sudo deluser alice sudo // xoa user ra khoi group
	- sudo groupadd developers // tao 1 group moi

* bài 3 : triển khai dự án frontend && backend
	// Triển khai dự án frontend
	- scp -r  backend-food.zip duc@192.168.183.131:/home/duc (vào thư mục chứa dự án đã nén thành zip và gõ lệnh)
	- cd /home/duc
    	- ls
    	- clear
    	- apt update
    	- apt install unzip
    	- unzip backend-food.zip
   	- rm -r backend-food.zip
   	- unzip frontend-food.zip
   	- rm -r frontend-food.zip
    	- mkdir project
   	- mv Backend-FoodWeb/ project
   	- ls -l project
   	- adduser backend-foodweb
        - ls -l project
        - chown -R backend-foodweb. project/Backend-FoodWeb/
        - chmod -R 750 project/Backend-FoodWeb/
    	- ls -l project
   	- cd project/Backend-FoodWeb/
   	- su backend-foodweb
   	- curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
   	- apt-get install nodejs -y
   	- sudo npm install -g npm@latest
   	- su backend-foodweb
   	- npm i 	
   	- nano /etc/systemd/system/backend-foodweb.service
		[Service]
		Type=simple
		User=backend-foodweb
		Restart=on-failure
		WorkingDirectory=/home/duc/project/Backend-FoodWeb
		ExecStart= npm run start -- --port=3000
   	- systemctl daemon-reload
   	- systemctl start backend-foodweb
   	- systemctl status backend-foodweb

   	// Triển khai dự án backend java springboot && database mysql
	- cd /home/duc
   	- mv springbe project/
   	- cd project/
   	- cd springbe/
   	- cd /home/duc
   	- ls -l project
   	- adduser springbe // tạo một user mới
   	- chown -R springbe. project/springbe/
   	- chmod -R 750 project/springbe/
   	- apt update
   	- cd project/springbe/
   	- apt install openjdk-17-jdk openjdk-17-jre
   	- apt install maven
   	- history
   	- apt install net-tools
   	- netstat -tlpun
   	- apt install mysql-server
   	- systemctl stop mysql
   	- ls /etc/mysql/mysql.conf.d
   	- nano /etc/mysql/mysql.conf.d/mysqld.cnf
		* [set up 127.0.0.1 thành 0.0.0.0]
    	- systemctl restart mysql
   	- netstat -tlpun
   	- mysql -u root
		  show databases;
		  create database FoodWeb;
		 	      // user                     //password
		  create user 'FoodWeb'@'%' identified by 'FoodWeb';
		 			 //database   //user
		  grant all privileges on FoodWeb.* to 'FoodWeb'@'%';
		  flush privileges;
		  exit
   	- mysql -h 192.168.1.111 -P 3306 -u FoodWeb -p [Nhập pass FoodWeb]
		  show databases;
		  use FoodWeb;
		  show tables;
   	- nano src/main/resources/application.properties
		[Setup username và password thành FoodWeb
		 port mysql thành 192.168.1.111:3306/FoodWeb]
   	- nano src/main/java/com/twd/SpringSecurity/JWT/config/CorsConfig.java (cấp quyền cho ip frontend hoặc domain của frontend)
   	- mvn install -DskipTests=true
   	- ls target
   	- java -jar target/SpringSecurity.JWT-0.0.1-SNAPSHOT.jar
   	- mysql -h 192.168.1.111 -P 3306 -u FoodWeb -p
	- cd /home/duc
	- nano /etc/systemd/system/backend-foodweb.service
		   [Service]
		   Type=simple
	           User=springbe
		   Restart=on-failure
		   WorkingDirectory=/home/duc/project/springbe
	           ExecStart= java -jar target/SpringSecurity.JWT-0.0.1-SNAPSHOT.jar
  	- systemctl daemon-reload
  	- systemctl restart backend-foodweb
  	- systemctl status backend-foodweb

		   databases
		   SELECT * FROM ourusers;
		   UPDATE ourusers
		   SET role = 'ADMIN'
		   WHERE id = 1;
		
		   SELECT * FROM roles; && SHOW COLUMNS FROM roles;
		   INSERT INTO roles (id, name) VALUES (1, 'Admin');
* bài 3.2 : triển khai nginx cho cả fe và be khi có domain
	- sudo apt install nginx
	// build dự án frontend React
 	- npm run build
	- mv build /var/www/html
	- cd 
	// Dự án backend springboot
	- đã triển khai ở bài trước
	- nano /etc/nginx/conf.d/tên domain.conf
		server {
		    listen 80;
		    server_name ticker-car.greenglobal.com.vn;
		
		    root /var/www/html/build;
		    index index.html;

		    location / {
		        try_files $uri /index.html;
		    }
		
		    location /api/ {
		        proxy_pass http://10.1.0.78:8081/api/; // port be và server tuỳ theo dự án miễn là có trong trạng thái run
		        proxy_http_version 1.1;
		        proxy_set_header Host $host;
		        proxy_set_header X-Real-IP $remote_addr;
		        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		        proxy_set_header X-Forwarded-Proto $scheme;
		    }
		}
	 - nginx -s reload
* bài 4 : triển khai gitlab-ctl gitlab doanh nghiệp
  	- curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
  	- sudo apt-get install gitlab-ee=14.4.1-ee.0
  	- nano /etc/hosts
	  	127.0.0.1 localhost
		127.0.1.1 dev-server2
		192.168.1.111 git.duyduc.tech // ip của server + domain cần đặt
		# The following lines are desirable for IPv6 capable hosts
		::1     ip6-localhost ip6-loopback
		fe00::0 ip6-localnet
		ff00::0 ip6-mcastprefix
		ff02::1 ip6-allnodes
		ff02::2 ip6-allrouters                        
	  - nano /etc/gitlab/gitlab.rb
		[external_url 'http://git.duyduc.tech']
	  - sudo gitlab-ctl reconfigure
		bỏ cái 192.168.1.111 git.duyduc.tech vào hosts của system32 // đói với linux thì nano /etc/hosts
  	  - sudo gitlab-ctl reconfigure
  	  - nano /etc/gitlab/gitlab.rb
  	  - cat /etc/gitlab/initial_root_password
		[username là root , password lấy trong initial_root_password]
		[ cấu hình Sign-up restrictions tắt Sign-up enabled và Require admin approval for new sign-ups admin sẽ tự tạo tk cho user]
		[tắt Default to Auto DevOps pipeline for all projects]
	  
	  // khởi đông lại gitlab-runners
	  - sudo gitlab-ctl status
	  - sudo gitlab-ctl restart

	  // đẩy dự án lên gitlab
	  - cd
	  - mkdir data
	  - cd data/
	  - git config --global user.name "Duc"
	  - git config --global user.email "vuduyduc550@gmail.com"
	  - git clone http://git.duyduc.tech/foodweb1/foodweb.git
	  - ls
	  - cd foodweb/
	  - cd /home/duc
	  - cp -rf springbe/* /root/data/foodweb
	  - cd data/foodweb/
	  - rm -r target
	  - git status
	  - git checkout -b main
	  - git add .
	  - git commit -m "push(project-demo)"
	  - git push --set-upstream origin main

* buổi 5 : // triển khai và cài đặt gitlab-runner (CI/CD)
	  - curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | bash
	  - apt-get install gitlab-runner
 	  - gitlab-runner register
		* Enter the gitlab instance URL ( - bỏ link của gitlab vào trong này)
		* Enter the registration Token ( - Vào CI/CD -> gitlab-runner -> lấy token vào dán vào)
		* Enter the description for the runner ( - có thể bỏ tên của server vào ví dụ mô tả là devops-server )
		* Enter the tags for the runner ( - có thể bỏ tên của server vào ví dụ tags là devops-server )
	  	* Enter option maintenance note for the runner ( - gõ shell ) 
  	  - nano /etc/gitlab-runner/config.toml 
  	  - nohup gitlab-runner run --working-directory /home/gitlab-runner --config/etc/gitlab-runner/config.toml --service gitlab-runner --user gitlab-runner 2>&1 &
	  - ps -ef| grep gitlab-runner
	  - ls /home/gitlab-runner/builds/aCCWF7QT/0/foodweb1/foodweb/
	  - visudo
		root    ALL=(ALL:ALL) ALL
		gitlab-runner ALL=(ALL) NOPASSWD: ALL
		gitlab-runner ALL=(ALL) NOPASSWD: /bin/mkdir*
		gitlab-runner ALL=(ALL) NOPASSWD: /bin/mv*
		gitlab-runner ALL=(ALL) NOPASSWD: /bin/cp*
		gitlab-runner ALL=(ALL) NOPASSWD: /bin/chown*
		gitlab-runner ALL=(ALL) NOPASSWD: /bin/rm*
		gitlab-runner ALL=(ALL) NOPASSWD: /usr/sbin/nginx*
		gitlab-runner ALL=(ALL) NOPASSWD: /bin/su springbe* ( springbe* là tên của user đã được tạo trước đó trong thư mục dự án backend )
		springbe ALL=(ALL) NOPASSWD: ALL ( springbe* là tên của user đã được tạo trước đó trong thư mục dự án backend )
	  - Vào gitlab của dự án sau đó vào CI/CD phần gitlab-runner reload lại sẽ có một runner đã chạy vào 
		-> nhấn vào phần cây bút (edit) dữ tích chọn 1 , còn lại bỏ tích chọn 
	  - Vào gitlab của dự án tạo file (.gitlab-ci.yml)
		// pipelines của dự án backend
			Pipline CI/CD Gitlab
			stages:
			    - build
			    - deploy
			    - showlog
			
			before_script:
			  - sudo chown -R gitlab-runner:gitlab-runner datas || true
			  - sudo chmod -R 755 datas || true
			
			build:
			    stage: build
			    variables:
			        GIT_STRATEGY: clone
			    script: 
			        - mvn install -DskipTests=true
			    tags:
			        - devops-server

			deploy:
			    stage: deploy
			    variables:
			        GIT_STRATEGY: none
			    script:
				- sudo fuser -k 8081/tcp || true
			        - sudo mkdir -p datas/springbe
			        - sudo cp target/SpringSecurity.JWT-0.0.1-SNAPSHOT.jar datas/springbe
			        - sudo chown springbe:springbe datas/springbe
			        - sudo su springbe -c "cd datas/springbe; nohup java -jar SpringSecurity.JWT-0.0.1-SNAPSHOT.jar > nohup.out 2>&1 &"
				- sudo nginx -s reload // nếu như có sử dụng domain
			    tags:
			        - devops-server
			
			showlog: 
			    stage: showlog
			    variables:
			        GIT_STRATEGY: none
			    script:
			        - sudo su springbe -c "cd datas/springbe; tail -n 10000 nohup.out"
			    tags:
			        - devops-server

			// Build CI/CD của frontend 
		        stages:
			  - build
			  - deploy
			  - showlog
			
			before_script:
			  - sudo chown -R gitlab-runner:gitlab-runner datas || true
			  - sudo chmod -R 755 datas || true
			
			build:
			  stage: build
			  variables:
			    GIT_STRATEGY: clone
			  script:
			    - npm install
			    - npm run build
			  artifacts:
			    paths:
			      - dist/ # hoặc build/ nếu dùng React
			  tags:
			    - devops-server
			
			deploy:
			  stage: deploy
			  variables:
			    GIT_STRATEGY: none
			  script:
			    # Xóa dữ liệu cũ trước khi copy để tránh file cũ vẫn còn
			    - sudo rm -rf /var/www/html/*
			    - sudo mv dist/* /var/www/html/
			    # - sudo mv build/* /var/www/html/  # nếu dùng React
			    - sudo chown -R www-data:www-data /var/www/html/
			    - sudo nginx -s reload
			  tags:
			    - devops-server
			
			showlog:
			  stage: showlog
			  variables:
			    GIT_STRATEGY: none
			  script:
			    - sudo tail -n 1000 /var/log/nginx/access.log || true
			    - sudo tail -n 1000 /var/log/nginx/error.log || true
			  tags:
			    - devops-server

* Bài 6 : Cài đặt và sử dụng Docker

	    - cd
	    - mkdir tools
	    - cd tools
	    - mkdir docker
	    - cd docker/
	    - nano install-docker.sh
			[#!/bin/bash
			sudo apt update
			sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
			echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
			sudo apt update
			sudo apt install -y docker-ce
			sudo systemctl start docker
			sudo systemctl enable docker
			sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
			sudo chmod +x /usr/local/bin/docker-compose
			docker --version
			docker-compose --version]
   	    - chmod +x install-docker.sh
    	    - bash install-docker.sh
	    - docker pull ubuntu:22.04
	    - docker images
	    - docker run --name ubuntu -it ubuntu:22.04
	    - docker ps -a
	    - docker start f73
	    - docker exec -it ubuntu bash
			* ls
	    		* cd home/
	    		* apt update
	    		* clear
	   		* apt update
	   		* apt install net-tools -y
	   		* netstat -tlpun
			* exit
	    - docker run --name car-serv -dp 8888:80 elroydevops/car-serv
	    - docker ps -a
	    - docker stop ubuntu
	    - docker rm ubuntu
	    - docker rm -f car-serv // -f bắt buộc xoá tiến trình dù có đang chạy
	    - docker ps -a
	    - docker rm -f $(docker ps -a) // xoá tât cả triển trình đang chạy , không nên thử
	    - docker images
	    - docker images
	    - docker rmi nginx:latest // xoá docker images
	    - docker rmi ubuntu:22.04

* Bài 7 // Dockerfile cho dự án Backend && Frontend
	    * Nhớ build Docker ở nơi chứa dự án
   	    - nano Dockerfile (Backend)
	
			# Maven build stage
			FROM maven:3.8-openjdk-17 AS build
			
			WORKDIR /app
			COPY . .
			RUN mvn install -DskipTests=true
			
			# Runtime stage
			FROM openjdk:17-jdk
			
			WORKDIR /run
			COPY --from=build /app/target/VegetFood-1.0.jar /run/VegetFood-1.0.jar
			EXPOSE 8080
			ENTRYPOINT ["java", "-jar", "/run/VegetFood-1.0.jar"]
	
	   - docker build -t vegetfood:v1 .
	   - docker images
	   - docker run --name vegetfood -dp 8888:8080 vegetfood:v1
	   - docker ps -a
	   - docker logs vegetfood

	// Docker-compose cho dự án backend để khởi động các service backend
	   - nano docker-compose.yml
		version: '3.8'
		services:
		  backend:
		    build:
		      context: .
		      dockerfile: Dockerfile
		    ports:
		      - "8080:8080"
		    depends_on:
		      - mysql
		    environment:
		      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/vegetfood
		      SPRING_DATASOURCE_USERNAME: vegetfood
		      SPRING_DATASOURCE_PASSWORD: vegetfood
		    container_name: vegetfood-backend
		    restart: always
		
		  mysql:
		    image: mysql:8.0
		    volumes:
		      - /db/mysql-1:/var/lib/mysql
		    environment:
		      MYSQL_ROOT_PASSWORD: vegetfood
		      MYSQL_DATABASE: vegetfood
		      MYSQL_USER: vegetfood
		      MYSQL_PASSWORD: vegetfood
		    ports:
		      - "3307:3306"
		    container_name: mysql-1
		    restart: always

	//Dockerfile dự án frontend
	    - nano Dockerfile ( dự án frontend )
			 FROM node:18 AS build
			 WORKDIR /app
			 COPY package*.json ./
			 RUN npm install
			 COPY . .
			 RUN npm run build
			 FROM nginx:alpine
			 COPY --from=build /app/dist /usr/share/nginx/html
			 EXPOSE 80
			 CMD ["nginx", "-g", "daemon off;"]]
	     - docker build -t frontend-food:v1 .
	     - docker images
	     - docker run --name frontend-food -dp 5000:80 frontend-food:v1
	     - docker ps -a
	     - docker logs frontend-food

	// Dockerhub
	     - cd
	     - docker images
	     - docker login // Đăng nhập bằng tài khoản dockerhub
	     - ls .docker/
	     - docker images
		  Tạo repository trên dockerhub trước khi push và giống như tên của tag đã đổi
	     - docker tag 2dd2d4f66de4 vuduyduc/backend
	     - docker images
	     - docker push vuduyduc/backend
	     - docker images
	     - docker rmi vuduyduc/backend
	     - docker pull vuduyduc/backend
	     - docker images
	     - docker run --name frontend-dev -dp 7777:80 vuduyduc/frontend

* Bài 8 Docker CI/CD
	     - usermod -aG docker gitlab-runner
	     - su gitlab-runner
	     - docker login docker.io/vuduyduc764/vegetfood -u vuduyduc764 -p Vuduyduc28042002@
	     - nano /etc/gitlab-runner/config.toml
			[session_server]
		  	  session_timeout = 1800
			[[runners]]
		  	  name = "docker"
		  	  url = "http://gitlab.duyduc.tech/"
		  	  id = 1
		  	  token = "jrB3xYt7s4nGR3_Z1qej"
		  	  token_obtained_at = 2025-01-17T17:06:38Z
		  	  token_expires_at = 0001-01-01T00:00:00Z
		  	  executor = "shell"
		  	  [runners.custom_build_dir]
		  	  [runners.cache]
		    	  MaxUploadedArchiveSize = 0
		    		[runners.cache.s3]
		    		[runners.cache.gcs]
		    		[runners.cache.azure]
		
		  	  [runners.docker]
		    	    tls_verify = false
		    	    image = "maven:3.8-openjdk-17"
		    	    privileged = true
		    	    disable_entrypoint_overwrite = false
		    	    volumes = ["/cache"]
		    	    networks = []
		    	    buildx = false
  	  - sudo systemctl restart gitlab-runner
  	  - sudo systemctl status gitlab-runner

	  // nhớ phải tạo Dockerfile sau đó đẩy lên nhánh cần Docker CI/CD của dự án
	  // Vào Setting -> CI/CD -> variables điền những thông tin ở phía dưới
	  Docker CI/CD
	  REGISTRY_URL (điền ở phần key) : docker.io (điền ở phần value) // nhớ bỏ đi tích chọn protect variables
	  REGISTRY_PROJECT (điền ở phần key) : vuduyduc764 (điền ở phần value) // nhớ bỏ đi tích chọn protect variables
	  REGISTRY_USER (điền ở phần key) : vuduyduc764 (điền ở phần value) // nhớ bỏ đi tích chọn protect variables
	  REGISTRY_PASSWORD (điền ở phần key) : Vuduyduc28042002@ (điền ở phần value) // nhớ bỏ đi tích chọn protect variables

	  // tạo file .gitlab-ci.yal
		variables:
		   DOCKER_IMAGE: ${REGISTRY_URL}/${REGISTRY_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}
		   DOCKER_CONTAINER: ${CI_PROJECT_NAME}
		stages:
		    - buildandpush
		    - deploy
		    - showlog
		
		build:
		    stage: buildandpush
		    before_script:
		        - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
		    variables:
		        GIT_STRATEGY: clone
		    script:
		        - docker build -t $DOCKER_IMAGE .
		        - docker push $DOCKER_IMAGE
		    tags:
		        - devops-server
		
		deploy:
		    stage: deploy
		    before_script:
		        - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
		    variables:
		        GIT_STRATEGY: none
		    script:
		        - docker pull $DOCKER_IMAGE
		        - docker rm -f $DOCKER_CONTAINER
		        - docker run --name $DOCKER_CONTAINER -dp 8888:8081 $DOCKER_IMAGE
		    tags:
		        - devops-server
		
		showlog:
		    stage: showlog
		    variables:
		        GIT_STRATEGY: none
		    script:
		        - sleep 20
		        - docker logs $DOCKER_CONTAINER
		    tags:
		        - devops-server
	   - docker ps -a

// nên chuẩn bị một server mới để cài đặt và CI/CD riêng cho jenkins
* bài 9 : cài đặt jenkins
	   - cd
	   - mkdir tools
	   - cd tools/
	   - mkdir jenkins
	   - cd jenkins/
	   - nano jenkins-install.sh
			apt install openjdk-17-jdk -y
			java --version
			curl -fsSL https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
			sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
			apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5BA31D57EF5975CA
			apt-get update
			apt install jenkins -y
			systemctl start jenkins
			systemctl enable jenkins
			ufw allow 8080
	  - chmod +x jenkins-install.sh
	  - bash jenkins-install.sh
	  - systemctl status jenkins
	  - nano /etc/hosts [192.168.1.122 jenkins.duyduc.tech]  // nhớ vào hosts của system32 để add 192.168.1.122 jenkins.duyduc.tech vào host tương tự như gitlab-ctl
	  - cat /var/lib/jenkins/secrets/initialAdminPassword
	  - apt install nginx
	  - nano /etc/nginx/conf.d/jenkins.duyduc.tech.conf
			server {
	  		  listen 80;
	                  server_name jenkins.duyduc.tech;
	
	                  location / {
	   		    proxy_pass http://jenkins.duyduc.tech:8080;
	                    proxy_http_version 1.1;
	                    proxy_set_header Upgrade $http_upgrade;
	                    proxy_set_header Connection keep_alive;
	                    proxy_set_header Host $host;
	                    proxy_cache_bypass $http_upgrade;
	                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	                    proxy_set_header X-Forwarded-Proto $scheme;
	
	                  }
	
	                } 
	  - clear
	  - nginx -s reload
	  - ls /var/lib/jenkins/
	  - nano /etc/hosts => setup domain và thêm domain của gitlab vào jenkins-server và ngược lại vơi gitlab-runner

* buổi 10 : Thiết lập jenkinsfile CI/CD
          // Đầu tiền trên các server triển khai dự án phải cần java và version của java phải tương ứng với version của jenkins trên server jenkins 
	  * đây là server triển khai dự án java ( lab-server )
	  - apt install openjdk-17-jdk openjdk-17-jre -y
	  - update-alternatives --config java // để chọn version java phù hợp với jenkins-server
	  - adduser jenkins 

	  // jenkins 
	  * vào dashboard -> manage jenkins -> nodes -> new node (đặt tên : lab-server , tích chọn Permanent Agent) -> create
  	  * Trong Name -> lables ( tương ứng với tên server ví dụ lab-server ) -> Custom WorkDir path (tạo thư mục /var/lib/jenkins và
          nhớ tạo /var/lib/jenkins trong cả lab-server)-> trước khi save nhìn bước ở dưới -> save
	  * mở tab google thứ 2 vào link của jenkins -> dashboard -> manage jenkins -> security -> Agents (TCP port for inbound agent) chọn fixed để port 8999 // port này trên jenkins-server
	  và không có dịch vụ nào chạy -> save -> sau đó hãy save bước ở trên 
	  - netstat -tlpun ( trong jenkins-server sẽ thấy cổng 8999 )
	  * Nhấn vào lab-server sau khi được tạo sẽ xuất hiện hướng dẫn Recommend sử dụng Unix

	  // vào lab-server (Kết nối jenkins agent trên server cần triển khai dự án đến jenkins-server)
	  - chown jenkins. /var/lib/jenkins 
	  - cd /var/lib/jenkins
	  - su jenkins
	  - echo 2885cab07ec8e099947e97435d5625d2da2ea7934efc40fcf71588f83ab6ebc6 > secret-file
	  - curl -sO http://jenkins.duyduc.tech:8080/jnlpJars/agent.jar
	  - java -jar agent.jar -url http://jenkins.duyduc.tech:8080/ -secret @secret-file -name "devops-server" -webSocket -workDir "/var/lib/jenkins" > nohup.out 2>&1 &
	  * quay lại trang jenkins rồi F5 lại sẽ thấy Agent is connected. 

	  // jenkins (Hướng dẫn kết nối gitlab đến jenkins-server)
	  * Dashboard -> new Item -> Folder (đặt tên tùy theo dự án Action in lab) -> save 
	  * Dashboard -> manage jenkins -> plugins -> tích chọn vào gitlab && blue ocean -> install -> tích chọn vào Restart Jenkins when installation is complete
	  * Sau khi install thành công -> installed plugin sẽ thấy blue ocean && gitlab-plugins
	  * Dashboard -> manage jenkins -> system -> kéo xuống sẽ thấy Gitlab (Lưu ý nhỏ nhớ phải add host vào nano /etc/hosts của 2 ip server và domain của hai IP đó qua /etc/hosts của nhau thì mới dùng được)
			* Collection name : gitlab server
			* Gitlab host URL : http://gitlab.duyduc.tech
	  		* Credential (ở đây cần kết nối qua API Token)  
				// qua Gitlab tạo một user jenkins có quyền admin
				* Đăng nhập bằng tài khoản jenkins -> edit profile -> access Token -> Token name (đặt tên token : token for jenkins server connection hoặc tùy theo ý tưởng của bạn)
				* Select scopes -> tích chọn api -> create personal access token
				* nhớ lưu lại Api token sau khi tạo
			// qua lại bên Jenkins
			* Credentials: Add -> jenkins -> Add credentials -> kind (Gitlab API token) -> API token (paste API Token vừa lấy ở gitlab vào đây) -> ID : Jenkins-gitlab-user -> description : Jenkins-gitlab-user -> Add 
			* Sau khi tạo thành công sẽ thấy ở phần Credentials -> chọn Gitlab API token(jenkins-gitlab-user) - Test Connection -> save

	  // Hướng dẫn kết nối gitlab của dự án đến jenkins
	  * Dashboard -> Action in lab -> new Item -> pipeline(tên dự án ví dụ shoeshop) -> Ok -> Discard old build -> Max of builds to keep (10) // chức năng giữ lại bảng build
		      		       -> kéo xuống build triggers -> build when a change is pushed to gitlab -> chọn Push Event && Accepted Merge Request Events
		      		       -> kéo xuống Pipeline -> Definition ( chọn pipeline script from SCM ) -> SCM ( chọn git ) -> Repository URL ( dùng link git của dự án => http://gitlab.duyduc.tech/vegetfood/vegetfood.git )
		       		       -> kéo xuống Credentials -> Add -> jenkins -> Add Credentials -> Kind (Username with password) -> Username : jenkins (được tạo trên gitlab) && Password : của user Jenkins trên gitlab 
															    -> ID : jenkins-gitlab-user-account -> Description : jenkins-gitlab-user-account -> Add
				       -> Và sau đó out ra Credentials -> chọn user vừa được tạo (jenkins-gitlab-user-account) 
				       -> kéo xuống Branches to build -> Branch Specifier (chọn nhánh muốn build khi có merge request ví dụ develop , ngoài ra có thể Add Branch các nhánh khác vào) -> save

	  // Vào Gitlab của dự án 
	  * Menu (nằm trên thanh header) -> Admin -> Setting -> Network -> Outbound requests -> click chọn cả 2 tuỳ chọn (Allow Requests to the local network from the web hooks and services , Allow Requests to the local network from system hooks)  -> Save changes

	  // Lấy token ở jenkins
	  * Admin -> security -> API Token -> Add new token ( đặt tên token tùy theo bạn ví dụ access token ) -> Generate (Nhớ copy token đã được gen ra)

	   // Vào Gitlab của dự án
	  * Settings -> Webhooks -> ở phần URL (format chính của URL http://<user trên jenkins>:<token của user đó trên jenkins>@<URL của jenkins>/project/<Đường dẫn dự án trên jenkins>/) // ở dưới là ví dụ
								     http://admin:11dda35a0e3b70466878a04f96db4dddc3@jenkins.duyduc.tech/project/Action_in_lab/course 
								     ( tích chọn Push Event && Tags event && merge request events && bỏ tuỳ chọn enable ssl) -> Add webhook // vì chúng ta không dùng https nếu dùng https thì có thể tích chọn enable SSL
 	  * Sau khi Add webhook -> ở dưới sẽ xuất hiện Project Hooks(1) -> Chọn Test -> tích chọn Push events 
	  // Vào lab-server của dự án
	  - visudo // copy ở dưới rồi bỏ vào bên trong
			jenkins  ALL=(ALL) NOPASSWD: ALL
			jenkins  ALL=(ALL) NOPASSWD: /bin/mkdir*
			jenkins  ALL=(ALL) NOPASSWD: /bin/cp*
			jenkins  ALL=(ALL) NOPASSWD: /bin/chown*
			jenkins  ALL=(ALL) NOPASSWD: /bin/su springbe ( springbe* là tên của user đã được tạo trước đó trong thư mục dự án backend )
			springbe ALL=(ALL) NOPASSWD: ALL ( springbe* là tên của user đã được tạo trước đó trong thư mục dự án backend )

	  - Tạo một Jenkinsfile bên nhánh develop của gitlab và triển khai pipeline trên Repo nhánh develop của dự án đó 
			pipeline {
			    agent { label 'devops-server' }
			
			    environment {
			        GIT_STRATEGY = 'clone'
			    }
			
			    stages {
			        stage('Build') {
			            steps {
			                script {
			                    sh 'mvn clean package -DskipTests'
			                    sh 'ls -lah target/'  
			                }
			            }
			        }
			
			        stage('Deploy') {
			            environment {
			                GIT_STRATEGY = 'none'
			            }
			            steps {
			                script {
			                    sh """
			                        sudo fuser -k 8080/tcp || true
			                        sudo mkdir -p /opt/datas/vegetfood
			                        sudo cp target/VegetFood-1.0.jar /opt/datas/vegetfood/
			                        sudo chown -R vegetfood:vegetfood /opt/datas/vegetfood
			                        sudo chmod 755 /opt/datas/vegetfood/VegetFood-1.0.jar
			                        ls -lah /opt/datas/vegetfood/
			                        sudo su - vegetfood -c "nohup java -jar /opt/datas/vegetfood/VegetFood-1.0.jar > /opt/datas/vegetfood/nohup.out 2>&1 &"
			                    """
			                }
			            }
			        }
			
			        stage('Show Log') {
			            environment {
			                GIT_STRATEGY = 'none'
			            }
			            steps {
			                script {
			                    sh """
			                        sleep 10
			                        sudo su - vegetfood -c "tail -n 50 /opt/datas/vegetfood/nohup.out"
			                    """
			                }
			            }
			        }
			    }
			
			    post {
			        always {
			            script {
			                sh """
			                    sudo chown -R jenkins:jenkins /opt/datas || true
			                    sudo chmod -R 755 /opt/datas || true
			                """
			            }
			        }
			    }
			}
		- Sau khi triển khai xong thì qua bên Jenkins của dự án sẽ xuất hiện dưới Build History , có thể vào Blue Ocean để xem logs của Pipelines
* buổi 11 : Monitor Garafana + prometheus
	// Monitor bởi docker
	1. Cài đặt Node Exporter trên các máy chủ
	Node Exporter thu thập metric hệ thống (CPU, RAM, disk, v.v.) từ các máy chủ. Cài đặt trên cả 3 máy chủ (10.1.0.175, 10.1.0.172, 10.1.0.176).
	
	Bước 1: Chạy Node Exporter bằng Docker
	Trên mỗi máy chủ, tạo một container Node Exporter:
       	- docker run -d \
	  --name node-exporter \
	  -p 9100:9100 \
	  --restart always \
	  prom/node-exporter:latest

	2. Cấu hình Prometheus và Grafana trên máy chủ chính (10.1.0.175)
		Prometheus và Grafana sẽ được triển khai bằng Docker Compose trên 10.1.0.175.
		Bước 1: Tạo thư mục và file cấu hình
		
			  - mkdir -p ~/monitoring
			  - cd ~/monitoring
			  - nano prometheus.yaml
				global:
				  scrape_interval: 15s
				
				scrape_configs:
				  - job_name: 'prometheus'
				    static_configs:
				      - targets: ['10.1.0.175:9090']  # Prometheus tự giám sát
				
				  - job_name: 'node-exporter'
				    static_configs:
				      - targets:
				          - '10.1.0.175:9100'  # Node Exporter trên máy chủ chính
				          - '10.1.0.172:9100'  # Node Exporter trên máy chủ 2
				          - '10.1.0.176:9100'  # Node Exporter trên máy chủ 3
		
	  Bước 2: Tạo file Docker Compose
		        - nano docker-compose.yml
				
				version: '3.8'
				
				services:
				  prometheus:
				    image: prom/prometheus:latest
				    container_name: prometheus
				    volumes:
				      - ./prometheus.yml:/etc/prometheus/prometheus.yml
				      - prometheus_data:/prometheus
				    ports:
				      - "9090:9090"
				    restart: always
				    networks:
				      - monitoring
				
				  grafana:
				    image: grafana/grafana:latest
				    container_name: grafana
				    volumes:
				      - grafana_data:/var/lib/grafana
				    ports:
				      - "3000:3000"
				    restart: always
				    networks:
				      - monitoring
				
				  node-exporter:
				    image: prom/node-exporter:latest
				    container_name: node-exporter
				    ports:
				      - "9100:9100"
				    restart: always
				    networks:
				      - monitoring
				
				volumes:
				  prometheus_data:
				  grafana_data:
				
				networks:
				  monitoring:
				    driver: bridge
		    
		Bước 3: Chạy Docker Compose
		Trong thư mục ~/monitoring, chạy lệnh:
			- docker-compose up -d
			- docker ps
	
		Truy cập:
		Prometheus: http://10.1.0.175:9090
		Grafana: http://10.1.0.175:3000 (Tài khoản mặc định: admin/admin, bạn sẽ được yêu cầu đổi mật khẩu).
		
		Bước 4: Cấu hình Grafana
			* Đăng nhập vào Grafana tại http://10.1.0.175:3000.
			* Thêm nguồn dữ liệu (Data Source):
			* Vào menu Connections > Data Sources > Add data source.
			* Chọn Prometheus.
			* Đặt URL: http://10.1.0.175:9090 (dùng tên service trong Docker Compose).
			* Nhấn Save & Test.
			* Tạo Dashboard:
			* Vào Create > Import.
			* Sử dụng ID dashboard phổ biến cho Node Exporter, ví dụ: 1860 (Node Exporter Full).
			* Chọn nguồn dữ liệu Prometheus vừa thêm.
			* Lưu dashboard để xem metric từ 3 máy chủ.

* buổi 12: thiết lập harbor_registry thay dockerhub
		- wget https://github.com/goharbor/harbor/releases/download/v2.9.3/harbor-online-installer-v2.9.3.tgz
		- tar -xvzf harbor-online-installer-v2.9.3.tgz
		- cd harbor
		- cp harbor.yml.tmpl harbor.yml
		- nano harbor.yml
			hostname: 192.168.230.132 // sửa hostname thành IP hoặc domain 
			# https related config
			#https: // tắt https nếu không dùng domain và SSL
			  # https port for harbor, default is 443
			  # port: 443
			  # The path of cert and key files for nginx
			  # certificate: /your/certificate/path
			  # private_key: /your/private/key/path
		- harbor_admin_password: admin123 // đổi mật khẩu nếu cần
		- sudo nano /etc/docker/daemon.json
			{
			  "insecure-registries": ["192.168.230.132"]
			}
		- ./install.sh
		- docker login 192.168.230.132
		- docker images
		// nhớ phải tạo project demo ở harbor_web trước khi push lên
		- docker tag registry:2 192.168.230.132/demo/myapp:latest 
		- docker push 192.168.230.132/demo/myapp:latest
