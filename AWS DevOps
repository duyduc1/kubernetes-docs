Buổi 1:
- Giới thiệu sơ lượt về DevOps On AWS

Buổi 2: DevOps RoadMap Sơ lược
- Research DevOps RoadMap để xem tổng quan sơ đồ cần học

Buổi 3: Nguồn tài liệu DevOps
- có thể research aws documentation
- aws training

Buổi 4: Vấn đề cẩn trọng trong DevOps
1.Security DevOps On AWS
- Tránh bị lộ key quan trọng lên Github
- Lộ trên ChatGPT
- Cần thân trong quá trình làm việc tránh mất tiền 
- Tăng cường bảo mật cho Account

Buổi 5: Credit Free - DevOps On AWS

Buổi 6: IAM User Admin và bảo mật 2 lớp 
1. Accout IAM Admin - MFA
- Chúng ta sẽ có một devide bên ngoài, device sẽ nhận và cho ra một số id và dựa vào số id đó để nhập vào yêu cầu của AWS mỗi lần đăng nhập
Tránh trường hợp hacker có thể đăng nhập vào sử dụng resource
// Tiến hành vào AWS Account
- Nhấn đăng nhập vào bảng điều khiển -> chọn Sign in using root user email (điền tài khoản gmail -> nhấn next và điền mật khẩu)
// Tạo một user mới
- Search (IAM) chọn IAM mở với tab mới -> sẽ thấy Dashboard -> bên thanh Side Bar sẽ thấy list danh sách -> chọn Users -> Create User -> User name (điền vào ô input Admin_User_DevOps
và tích chọn Provide user access to the AWS Management Console -> chọn i want to create an IAM user và tích chọn Users must create a new password at next sign-in-Recommended để không tạo lại password) -> Create
- Set permissions trong Permissions options có thể chọn Add user to group và gán quyền AdministratorAccess sau này có thể tích bỏ AdministratorAccess cũng được hoặc có thể chọn thẳng 
Attach policies directly -> tích chọn AdministratorAccess -> Next
- Review and create -> tích chọn Create User 
- Retrieve password -> sẽ thấy phần user và password và đường link console(lấy id trong phần đường link này) -> qua tab khác đăng nhập bằng tài khoản và id vừa được tạo
- Sau khi đăng nhập xong sẽ thấy Console Home -> nếu muốn bật xác thực thì chọn Security Credential -> chọn asign MFA -> trong Device name tự đặt (ví dụ AWS-lab-AdminuserDevOps) -> chọn Authenticator app -> Next (Có thể không cần cũng được)

Buổi 7: Quản lý chi phí với AWS Budgets
- Đăng nhập với User Root
// Trong Console Home
- Tích chọn vào Billing and Cost Management và sẽ thấy Tích chọn vào Billing and Cost Management home
- Click vào Budgets bên thanh sidebar -> create budgets -> click chọn use a template -> kéo xuống Enter your budgeted amount($) ví dụ là 10 đô -> kéo xuống Email recipients (điền mail của mình vào) -> Create budget

Buổi 8: Tổng quan các loại dịch vụ trên AWS

Buổi 9: Khởi tạo EC2 Ubuntu với VPC default
- gần thanh Header click chọn vào EC2 -> click chọn vào instances -> tích chọn Launch instances bên thanh sidebar
                                                                  - Name đặt là EC2_Ubuntu
                                                                  - Quick Start (click chọn Ubuntu)
                                                                  - Key pair name - required (đặt tên instance_Key_DevOps_On_AWS) -> Create key pair -> trong thư mục được tải về
                                                                  - Security group name - required (sg_for_devops_on_aws)
                                                                  - configure storage (1x tăng lên 18) 
                                                                  - click launch instance để tạo máy chủ
                                                                  // Hướng dẫn truy cập vào server
                                                                  - vào visual code kéo thư mục key đã được download vào thư mục visualcode -> sau đó ssh -i instance_Key_DevOps_On_AWS.pem ubuntu@ip của server (truy cập thành công vào server)
                                                                  - Có thể connect trực tiếp trên Connect to instance sau khi tạo máy ảo thành công -> kéo xuống sẽ thấy connect

Buổi 10: Triển khai ứng dụng trên EC2 Ubuntu
- cd
- curl -sL https://deb.nodesource.com/setup_20.x -0 nodesource_setup.sh
- sudo bash nodesource_setup.sh
- sudo apt install nodejs -y
- npm -v
- node -v
- mkdir my-app 
- cd my-app 
- npx create-next-app@latest frontend
- cd frontend
- ls
- npm run dev
- vào lại instance bên thanh sidebar của máy chủ Ubuntu đã tạo lúc nãy -> Security
- Nhìn ở dưới thấy Security groups ( click chọn vào sg-06654axxxxxxxxxxxxx(sg_for_devops_on_aws) đây là ví dụ) 
- Sau khi tích chọn sẽ thấy inbound rules (1) -> chọn edit inbound rules -> Add rule -> tất cả custom như SSH trừ port range để lại port 3000 của ứng dụng frontend -> save rules

Buổi 11: Cài đặt Jenkins trên EC2
- sudo apt update
- sudo apt install fontconfig openjdk-17-jre
- java -version

# Setup Jenkins
- sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
    https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

- echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/" | \
    sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
- sudo apt-get update
- sudo apt-get install jenkins -y
- sudo systemctl enable jenkins
- sudo systemctl start jenkins
- sudo systemctl status jenkins
- vào lại instance bên thanh sidebar của máy chủ Ubuntu đã tạo lúc nãy -> Security
- Nhìn ở dưới thấy Security groups ( click chọn vào sg-06654axxxxxxxxxxxxx(sg_for_devops_on_aws) đây là ví dụ) 
- Sau khi tích chọn sẽ thấy inbound rules (1) -> chọn edit inbound rules -> Add rule -> tất cả custom như SSH trừ port range để lại port 8080 của ứng dụng jenkins -> save rules
// vào lại server
- cat /var/lib/jenkins/secrets/initialAdminPassword // copy password
- dán vào password jenkins 
- Install các plugins mặc định
// Ở format của  Create First Admin User
- điền là Admin hết để dễ quản lý

Buổi 12: Triển khai một VPC mới (là network là nơi tạo các resource bên trong)
- Trên thanh header tích chọn VPC
- Vào VPCs để xem sơ đồ của network
- click chọn vào Create VPC gần thanh header
- ở Resources to create (chọn VPC and more)
- Sửa Auto-generate thành (devops)
- Click Create VPC 
- Sau khi cài xong nhấn vào (View VPC)

Buổi 13: Khởi tạo EC2 tên VPC mới
- Chọn launch instance trong dashboard 
- Name and tags (EC2_Ubuntu)
- Quick Start (click chọn Ubuntu)
- Key pair name - required (đặt tên instance_Key_DevOps_On_AWS) -> Create key pair
- VPC - required (thay đổi thành devops-vpc bài trước đã tạo)
- Subnet chọn devops-subnet-public2
- Auto-assign public IP (chọn Enable)
- Security group name - required (devops_sg)
- configure storage (1x tăng lên 18) 
- click launch instance để tạo máy chủ

Buổi 14: Cài đặt Database trên EC2 Ubuntu
- apt install mysql-server
- systemctl stop mysql
- ls /etc/mysql/mysql.conf.d
- nano /etc/mysql/mysql.conf.d/mysqld.cnf
		* [set up 127.0.0.1 thành 0.0.0.0]
- systemctl restart mysql
- mysql -u root
		  show databases;
		  create database FoodWeb;
		 	      // user                     //password
		  create user 'FoodWeb'@'%' identified by 'FoodWeb';
		 			 //database   //user
		  grant all privileges on FoodWeb.* to 'FoodWeb'@'%';
		  flush privileges;
		  exit
   	- mysql -h 192.168.1.111 -P 3306 -u FoodWeb -p [Nhập pass FoodWeb]
		  show databases;
		  use FoodWeb;
		  show tables;
// Install PostgreSQL
- sudo apt install postgresql postgresql-contrib
- sudo systemctl start postgresql
- sudo systemctl status postgresql
- sudo nano /etc/postgresql/14/main/postgresql.conf
      listen_addresses = '*' hoặc 0.0.0.0
- sudo systemctl restart postgresql
// truy cập vào database postgre
- sudo -i -u postgres
- psql
- \l
- \dt // xem thử có bao nhiêu table
- \c postgres // kết nối với database 

-- Tạo cơ sở dữ liệu
CREATE DATABASE mydatabase;

-- Tạo user (tùy chọn)
CREATE USER myuser WITH PASSWORD 'mypassword';

-- Cấp toàn quyền cho user trên database (tùy chọn)
GRANT ALL PRIVILEGES ON DATABASE mydatabase TO myuser;

- vào lại instance bên thanh sidebar của máy chủ Ubuntu đã tạo lúc nãy -> Security
- Nhìn ở dưới thấy Security groups ( click chọn vào sg-06654axxxxxxxxxxxxx(sg_for_devops_on_aws) đây là ví dụ) 
- Sau khi tích chọn sẽ thấy inbound rules (1) -> chọn edit inbound rules -> Add rule -> tất cả custom như SSH trừ port range để lại port 3306 hoặc 5432 của ứng dụng database mysql hoặc postgresql -> save rules

Buổi 15: Tạo Database RDS trên AWS
- Vào Dashboard -> tìm kiếm RDS và tích chọn
- bên thanh SideBar nhấn chọn Databases
- Create Databases
- Chọn Easy create
- Configuaration (Chọn Postgresql) 
- DB instance size (tích chọn free tier)
- DB instance identifie (database-1) // tên database
- Master username (postgres)

- Có thể chọn Standard create
- Template chọn (free tier)
- DB instance identifier (devops-2) // tên database
- Credentials management (chọn Self managed để không tốn tiền)
- Master password (tự custom)
- Confirm master password (mật khẩu ở trên)
- public access (chọn yes)
- click Create database

Buổi 16: Hướng dẫn Connect tới Database và thao tác
- Vào Databases bên thanh Sidebar của Dashboard -> sẽ thấy database devops-2 đã được tạo -> click vào 
* Chú ý Endpoint trong phần Endpoint & port
* Bên cạnh sẽ thấy Security -> chọn vào default (sg-xxxxxxxxxx) -> nếu chưa có hãy mở bằng Edit inbound rules
// đối với database postgresql
- SSH vào server EC2 // ssh -i tới thư mục chứac key ubuntu@ip
- sudo apt update
- sudo apt install postgresql postgresql-contrib
- sudo systemctl start postgresql.service
- PGPASSWORD=vuduyduc psql -h <endpoint> -p 5432 -U postgres -d postgres
// đối với database mysql 
- sudo apt update
- sudo apt install mysql-client -y
- mysql -h <RDS-endpoint> -u admin -p

Buổi 17: Làm quen với dịch vụ lưu trữ S3 // dùng để lưu trư dạng ảnh và video
- Vào Dashboard Console Home -> nhấn vào S3 
- Sau khi chuyển tới dashboard S3 -> nhấn vào create bucket
				  - Bucket name (đặt là lab2.12-devops) - tất cả còn lại để mặc định -> Createa bucket
- Sau khi tạo xong vào lại -> lab2.12-devops -> Create folder -> đặt tên Folder(data) -> Create Folder -> sau khi tạo xong sẽ xuất hiện folder data -> click upload -> click vào Add files -> chọn file -> upload
																	-> vào ảnh vừa upload sẽ thấy Object URL sẽ thấy đường link ảnh 
- vào lại lab2.12-devops -> sẽ hấy Permissions -> ở phần Block public access -> nhấn Edit -> bỏ tích chọn Block all public access -> save changes -> kéo xuống tìm Accees control list (ACL) chọn edit
																	-> chọn ACLs enabled -> save changes
- Vào lại lab2.12-devops -> vào thư mục data -> tích chọn ảnh -> chọn Actions phía trên (chọn Make public using ACL) -> make public -> truy cập lại URL ảnh

Buổi 18: Host static web trên AWS
- cũng như bài 17 nhưng thay vì đẩy ảnh thì chúng ta đẩy các file index.html css va js (nói chung là file tỉnh)

Buổi 19: Tổng quan một số dịch vụ dùng cho devOps
- Jira dùng để lên kết hoạch
- git dùng để lưu trữ repo
- jenkins máy chủ mã nguồn mở để tự động hoá

Buổi 20: Dùng git làm việc với source 
- git config --list
- git clone <repository-url>  
- git status                  # Kiểm tra trạng thái
- git add .                   # Thêm file vào staging
- git commit -m "Message"     # Commit thay đổi
- git pull origin <branch>    # Lấy code mới nhất từ remote
- git push origin <branch>    # Đẩy code lên remote
- git checkout <branch-name>  # Chuyển sang nhánh 
- git checkout -b <branch>    # Tạo và chuyển sang nhánh mới
- git merge <branch>          # Hợp nhánh
- git fetch                   # Lấy thông tin từ remote (không merge)
- git log                     # Check log 
- git branch -d <branch-name> # Xóa nhánh đã merge
- git push origin --delete develop # push thay doi 
- git branch -D <branch-name> # Xóa nhánh chưa merge

Buổi 21: Các thao tác cơ bản với Docker
# Tóm tắt các lệnh Docker

## Lệnh Docker cơ bản
# Kiểm tra phiên bản Docker
- docker --version

# Kiểm tra trạng thái Docker
- docker info

# Danh sách tất cả các lệnh Docker
- docker --help

## Làm việc với Docker Images
# Liệt kê các Docker Images
- docker images

# Tải một image từ Docker Hub
- docker pull <image-name>:<tag>

# Xóa một image
- docker rmi <image-id>

# Xây dựng image từ Dockerfile
- docker build -t <image-name>:<tag> .

# Gắn thẻ (tag) cho một image
- docker tag <image-id> <new-image-name>:<new-tag>

# Đẩy image lên Docker Hub
- docker push <image-name>:<tag>

## Làm việc với Containers
# Liệt kê các container đang chạy
- docker ps

# Liệt kê tất cả container (bao gồm cả container đã dừng)
- docker ps -a

# Chạy một container
- docker run -d --name <container-name> <image-name>:<tag>

# Dừng một container
- docker stop <container-id>

# Khởi động lại container
- docker restart <container-id>

# Xóa một container
- docker rm <container-id>

# Truy cập vào một container đang chạy
- docker exec -it <container-id> /bin/bash

## Lệnh về Mạng (Network)
# Liệt kê các mạng (network)
- docker network ls

# Tạo một mạng mới
- docker network create <network-name>

# Kết nối một container vào mạng
- docker network connect <network-name> <container-id>

# Ngắt kết nối một container khỏi mạng
- docker network disconnect <network-name> <container-id>

## Xem Logs và Debug
# Xem logs của container
- docker logs <container-id>

# Theo dõi logs theo thời gian thực
- docker logs -f <container-id>

# Xem chi tiết thông tin của container
- docker inspect <container-id>

# Kiểm tra hiệu suất container
- docker stats

## Dọn dẹp hệ thống
# Xóa các container đã dừng
- docker container prune

# Xóa các image không sử dụng
- docker image prune

# Xóa toàn bộ tài nguyên không sử dụng (container, image, network, volume)
- docker system prune -a

## Các lệnh thường dùng hàng ngày
# Kiểm tra container đang chạy
- docker ps

# Kiểm tra các image có sẵn
- docker images

# Chạy một container
- docker run -d --name <container> <image>

# Dừng một container
- docker stop <container>

# Xóa một container
- docker rm <container>

# Tải một image
- docker pull <image>

# Xây dựng một image
- docker build -t <image-name>:<tag> .

# Xem logs của container
- docker logs <container>

# Truy cập vào container
- docker exec -it <container> /bin/bash

Buổi 22: Build images với Dockerfile
- curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
- apt-get install nodejs -y
- sudo npm install -g npm@latest

// tiến hành down dự án nestjs
- npm i -g @nestjs/cli
- nest new nest-docker
- cd nest-docker
- nano Dockerfile
	# Use the official Node.js image as the base image
	FROM node:20
	
	# Set the working directory inside the container
	WORKDIR /usr/src/app
	
	# Copy package.json and package-lock.json to the working directory
	COPY package*.json ./
	
	# Install the application dependencies
	RUN npm install
	
	# Copy the rest of the application files
	COPY . .
	
	# Build the NestJS application
	RUN npm run build
	
	# Expose the application port
	EXPOSE 3000
	
	# Command to run the application
	CMD ["node", "dist/main"]

- docker build -t nest-docker:v1 .
- docker run -d -p 3000:3000 nest-docker 
// push lên dockerhub
- docker login
- docker tag nest-docker vuduyduc764/nest-docker
- docker images
- docker push vuduyduc764/nest-docker

Buổi 23: Quản lý container với docker-compose
- docker stop nest-docker 
- docker rm nest-docker
- nano docker-compose
	version: '3.8'

	services:
	  app:
	    build: . // cũng có thể thay đổi build bằng image đã được build sẵn
	    container_name: nest-docker
	    ports:
	      - "3000:3000"
	    volumes:
	      - /storage:/app
	    environment:
	      - NODE_ENV=development
	      - DATABAE_URL=0
	    depends_on:
	      - db
	
	  db:
	    image: mongo:6
	    container_name: mongodb
	    ports:
	      - "27017:27017"
	    volumes:
	      - mongo_data:/data/db
	
	volumes:
	  mongo_data:
- docker-compose -f docker-compose.yaml up -d
- docker-compose down
